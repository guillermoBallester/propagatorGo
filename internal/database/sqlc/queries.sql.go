// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (
    title, url, text, site_name, scraped_at, symbol
) VALUES (
             $1, $2, $3, $4, $5, $6
         ) ON CONFLICT (url)
    DO UPDATE SET
                  title = EXCLUDED.title,
                  text = EXCLUDED.text,
                  site_name = EXCLUDED.site_name,
                  scraped_at = EXCLUDED.scraped_at,
                  symbol = EXCLUDED.symbol
RETURNING id, title, url, text, site_name, scraped_at, created_at, symbol
`

type CreateArticleParams struct {
	Title     string         `json:"title"`
	Url       string         `json:"url"`
	Text      sql.NullString `json:"text"`
	SiteName  string         `json:"site_name"`
	ScrapedAt time.Time      `json:"scraped_at"`
	Symbol    string         `json:"symbol"`
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (Article, error) {
	row := q.queryRow(ctx, q.createArticleStmt, createArticle,
		arg.Title,
		arg.Url,
		arg.Text,
		arg.SiteName,
		arg.ScrapedAt,
		arg.Symbol,
	)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Url,
		&i.Text,
		&i.SiteName,
		&i.ScrapedAt,
		&i.CreatedAt,
		&i.Symbol,
	)
	return i, err
}

const getArticle = `-- name: GetArticle :one
SELECT id, title, url, text, site_name, scraped_at, created_at, symbol FROM articles
WHERE id = $1
`

func (q *Queries) GetArticle(ctx context.Context, id int32) (Article, error) {
	row := q.queryRow(ctx, q.getArticleStmt, getArticle, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Url,
		&i.Text,
		&i.SiteName,
		&i.ScrapedAt,
		&i.CreatedAt,
		&i.Symbol,
	)
	return i, err
}

const getArticleBySite = `-- name: GetArticleBySite :many
SELECT id, title, url, text, site_name, scraped_at, created_at, symbol FROM articles
WHERE site_name = $1
`

func (q *Queries) GetArticleBySite(ctx context.Context, siteName string) ([]Article, error) {
	rows, err := q.query(ctx, q.getArticleBySiteStmt, getArticleBySite, siteName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Article{}
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.Text,
			&i.SiteName,
			&i.ScrapedAt,
			&i.CreatedAt,
			&i.Symbol,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArticleBySymbol = `-- name: GetArticleBySymbol :many
SELECT id, title, url, text, site_name, scraped_at, created_at, symbol FROM articles
WHERE symbol = $1
`

func (q *Queries) GetArticleBySymbol(ctx context.Context, symbol string) ([]Article, error) {
	rows, err := q.query(ctx, q.getArticleBySymbolStmt, getArticleBySymbol, symbol)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Article{}
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.Text,
			&i.SiteName,
			&i.ScrapedAt,
			&i.CreatedAt,
			&i.Symbol,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArticleByURL = `-- name: GetArticleByURL :one
SELECT id, title, url, text, site_name, scraped_at, created_at, symbol FROM articles
WHERE url = $1
`

func (q *Queries) GetArticleByURL(ctx context.Context, url string) (Article, error) {
	row := q.queryRow(ctx, q.getArticleByURLStmt, getArticleByURL, url)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Url,
		&i.Text,
		&i.SiteName,
		&i.ScrapedAt,
		&i.CreatedAt,
		&i.Symbol,
	)
	return i, err
}
